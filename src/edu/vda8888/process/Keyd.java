package process;

public class Keyd extends LivingThings{
    
    private int xWall, yWall;
    private int side;

    public Keyd(int x, int y) {
        super(x,y);
    }
    
    public Keyd(int x, int y, int xWall, int yWall, int side) { // 1111 up right down left
        super(x,y);
        this.xWall = xWall;
        this.yWall = yWall;
        this.side = side;
    }
    
    protected short [][] changeState(short[][] maze) {
        int otherSide = (LivingThings.digit(maze[this.xWall][this.yWall],this.side)+1)%2;
        maze[this.xWall][this.yWall] 
                = editDigit(maze[this.xWall][this.yWall],this.side,otherSide);
        // Also changeState the relevant unit
        int xRelevant = 0, yRelevant = 0;
        if (this.side == 1) { //left --> Unit on the left changes right wall state
            xRelevant = this.xWall;
            yRelevant = this.yWall - 1;
        } else if (this.side == 2) { //down
            xRelevant = this.xWall + 1;
            yRelevant = this.yWall;
        } else if (this.side == 3) { //right
            xRelevant = this.xWall;
            yRelevant = this.yWall + 1;
        } else if (this.side == 4) { //up
            xRelevant = this.xWall - 1;
            yRelevant = this.yWall;
        }
        int relevantSide = (this.side + 2)%4;
        if (relevantSide == 0) relevantSide += 4;
        maze[xRelevant][yRelevant]
                = editDigit(maze[xRelevant][yRelevant],relevantSide,otherSide);
        return maze;
    }
    
    protected short [][][] changeState(short [][][] maze) {
        int otherSide = (LivingThings.digit(maze[this.xWall][this.yWall][0],this.side)+1)%2;
        maze[this.xWall][this.yWall][0]
                = editDigit(maze[this.xWall][this.yWall][0],this.side,otherSide);
        // Also changeState the relevant unit
        int xRelevant = 0, yRelevant = 0;
        if (this.side == 1) { //left --> Unit on the left changes right wall state
            xRelevant = this.xWall;
            yRelevant = this.yWall - 1;
        } else if (this.side == 2) { //down
            xRelevant = this.xWall + 1;
            yRelevant = this.yWall;
        } else if (this.side == 3) { //right
            xRelevant = this.xWall;
            yRelevant = this.yWall + 1;
        } else if (this.side == 4) { //up
            xRelevant = this.xWall - 1;
            yRelevant = this.yWall;
        }
        int relevantSide = (this.side + 2)%4;
        if (relevantSide == 0) relevantSide += 4;
        maze[xRelevant][yRelevant][0]
                = editDigit(maze[xRelevant][yRelevant][0],relevantSide,otherSide);
        
        return maze;
    }
    
    private static short editDigit(int x, int digit, int editValue) {
        String tam = "";
        while (x != 0) {
            int i = x % 2;
            tam = i + tam;
            x = x / 2;
        }
        if (tam.length() < digit) {
            while (tam.length() < digit) {
                tam = "0" + tam;
            }
        }
        String valueTam = "" + editValue;
        String tam1 = tam.substring(0, tam.length() - digit);
        String tam2 = tam.substring(tam.length() - digit + 1);
        tam = tam1.concat(valueTam).concat(tam2);
        return (short) Integer.parseInt(tam, 2);
    }
    
    //Getter and Setter Autogenerated Code
    public int getxWall() {
        return xWall;
    }

    public int getyWall() {
        return yWall;
    }

    public int getSide() {
        return side;
    }

    public void setxWall(int xWall) {
        this.xWall = xWall;
    }

    public void setyWall(int yWall) {
        this.yWall = yWall;
    }

    public void setSide(int side) {
        this.side = side;
    }
    
}
