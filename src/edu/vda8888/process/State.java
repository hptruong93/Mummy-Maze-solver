package process;

public class State {

    private short[][][] maze;
    // 111111 last four digits: up, right, down, left
    // first two digits: key, traps
    private MummyWhite[] mummyWhite;
    private MummyRed[] mummyRed;
    private Scorpion[] sk;
    private ScorpionRed[] skRed;
    private Keyd[] key;
    private Human human;
    private short step;

    public State(short[][][] maze,Keyd[] key, MummyWhite[] mummyWhite, MummyRed[] mummyRed, 
            Scorpion[] sk,ScorpionRed[] skRed, Human human, short step) {
        this.maze = maze;
        this.key = key;
        this.mummyWhite = mummyWhite;
        this.mummyRed = mummyRed;
        this.sk = sk;
        this.skRed = skRed;
        this.human = human;
        this.step = step;
    }
    
    public State cloneState() {
        short [][][] mazee = this.getMaze();
        Keyd [] newKey = this.getKey();
        MummyWhite[] mummyWhitee = this.getMummyWhite();
        MummyRed[] mummyRede = this.getMummyRed();
        Scorpion[] ske = this.getSk();
        ScorpionRed [] skRede = this.getSkRed();
        Human humane = this.getHuman();
        short stepe = this.getStep();
        
        short [][][] newMaze = new short[mazee.length][mazee[0].length][mazee[0][0].length];
        for (int i = 0; i < mazee.length;i++) {
            for (int j = 0; j < mazee[0].length; j++) {
                for (int k = 0; k < mazee[0][0].length; k++) {
                    newMaze[i][j][k] = mazee[i][j][k];
                }
            }
        }
        
        MummyWhite[] newMummyWhite = new MummyWhite[mummyWhitee.length];
        for (int i = 0; i < mummyWhitee.length;i++) {
            newMummyWhite[i] = new MummyWhite(mummyWhitee[i].getX(),mummyWhitee[i].getY());
        }
        MummyRed[] newMummyRed = new MummyRed[mummyRede.length];
        for (int i = 0; i < mummyRede.length;i++) {
            newMummyRed[i] = new MummyRed(mummyRede[i].getX(),mummyRede[i].getY());
        }
        Scorpion[] newSk = new Scorpion[ske.length];
        for (int i = 0; i < ske.length; i++) {
            newSk[i] = new Scorpion(ske[i].getX(),ske[i].getY());
        }
        ScorpionRed [] newSkRed = new ScorpionRed[skRede.length];
        for (int i = 0; i < skRede.length; i++) {
            newSkRed[i] = new ScorpionRed(skRed[i].getX(),skRed[i].getY());
        }
        Human newHuman = new Human(humane.getX(),humane.getY());
        short newStep = stepe;
        
        State newState = new State(newMaze,newKey,newMummyWhite,newMummyRed,newSk,newSkRed,newHuman,newStep);
        return newState;
    }
    
// Getter and Setter Autogenerated

    public void setMaze(short[][][] maze) {
        this.maze = maze;
    }

    public void setMummyWhite(MummyWhite[] mummyWhite) {
        this.mummyWhite = mummyWhite;
    }

    public void setMummyRed(MummyRed[] mummyRed) {
        this.mummyRed = mummyRed;
    }

    public void setSk(Scorpion[] sk) {
        this.sk = sk;
    }

    public void setHuman(Human human) {
        this.human = human;
    }

    public void setStep(short step) {
        this.step = step;
    }

    public short[][][] getMaze() {
        return maze;
    }

    public MummyWhite[] getMummyWhite() {
        return mummyWhite;
    }

    public MummyRed[] getMummyRed() {
        return mummyRed;
    }

    public Scorpion[] getSk() {
        return sk;
    }

    public Human getHuman() {
        return human;
    }

    public short getStep() {
        return step;
    }

    public Keyd[] getKey() {
        return key;
    }

    public void setKey(Keyd[] key) {
        this.key = key;
    }

    public ScorpionRed[] getSkRed() {
        return skRed;
    }

    public void setSkRed(ScorpionRed[] skRed) {
        this.skRed = skRed;
    }
}
